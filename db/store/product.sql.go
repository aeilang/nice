// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: product.sql

package store

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createProduct = `-- name: CreateProduct :one
insert into products (
  name, price, image, description, quantity
) values ($1, $2, $3, $4, $5)
returning id, name, description, image, price, quantity, created_at
`

type CreateProductParams struct {
	Name        string         `db:"name" json:"name"`
	Price       pgtype.Numeric `db:"price" json:"price"`
	Image       string         `db:"image" json:"image"`
	Description string         `db:"description" json:"description"`
	Quantity    int32          `db:"quantity" json:"quantity"`
}

func (q *Queries) CreateProduct(ctx context.Context, arg CreateProductParams) (Product, error) {
	row := q.db.QueryRow(ctx, createProduct,
		arg.Name,
		arg.Price,
		arg.Image,
		arg.Description,
		arg.Quantity,
	)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Image,
		&i.Price,
		&i.Quantity,
		&i.CreatedAt,
	)
	return i, err
}

const getProductByID = `-- name: GetProductByID :one
select id, name, description, image, price, quantity, created_at from products 
where id = $1 limit 1
`

func (q *Queries) GetProductByID(ctx context.Context, id int32) (Product, error) {
	row := q.db.QueryRow(ctx, getProductByID, id)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Image,
		&i.Price,
		&i.Quantity,
		&i.CreatedAt,
	)
	return i, err
}

const getProducts = `-- name: GetProducts :many
select id, name, description, image, price, quantity, created_at from products
`

func (q *Queries) GetProducts(ctx context.Context) ([]Product, error) {
	rows, err := q.db.Query(ctx, getProducts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Product
	for rows.Next() {
		var i Product
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.Image,
			&i.Price,
			&i.Quantity,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getProductsByIDs = `-- name: GetProductsByIDs :many
select id, name, description, image, price, quantity, created_at from products
where id = any($1::int[])
`

func (q *Queries) GetProductsByIDs(ctx context.Context, dollar_1 []int32) ([]Product, error) {
	rows, err := q.db.Query(ctx, getProductsByIDs, dollar_1)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Product
	for rows.Next() {
		var i Product
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.Image,
			&i.Price,
			&i.Quantity,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateProduct = `-- name: UpdateProduct :exec
update products set name = $1, price = $2, 
image = $3, description = $4, quantity = $5
where id = $6
`

type UpdateProductParams struct {
	Name        string         `db:"name" json:"name"`
	Price       pgtype.Numeric `db:"price" json:"price"`
	Image       string         `db:"image" json:"image"`
	Description string         `db:"description" json:"description"`
	Quantity    int32          `db:"quantity" json:"quantity"`
	ID          int32          `db:"id" json:"id"`
}

func (q *Queries) UpdateProduct(ctx context.Context, arg UpdateProductParams) error {
	_, err := q.db.Exec(ctx, updateProduct,
		arg.Name,
		arg.Price,
		arg.Image,
		arg.Description,
		arg.Quantity,
		arg.ID,
	)
	return err
}
